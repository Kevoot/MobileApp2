/*
 * Viable code taken from previous game of life application
 * These portions were mainly responsible for drawing to a surfaceView, which
 * unlike using a standard view, allows for automatic OpenGL acceleration
 * which will be necessary for decent performance
 */
 
***GridSurface.java***
public class GridSurface extends SurfaceView {
	// Handler for running simulation loop
	public final Handler mHandler = new Handler();
	private SurfaceHolder holder;
    private GridLoopThread GridThread;

	// for attaching handlers (never draw in the main thread)
	final Runnable mRunnable = new Runnable() {
		public void run() {
			mHandler.removeCallbacks(this);
			// Do work, step through, draw grids, etc.
			mHandler.postDelayed(this, mDelay);
		}
	};
	
	public GridSurface(Context context, AttributeSet attrs) {
		super(context, attrs);
        gridThread = new GridLoopThread(this);
        holder = getHolder();
	}
	holder.addCallback(new SurfaceHolder.Callback() {
		@Override
		public void surfaceDestroyed(SurfaceHolder holder) {
			boolean retry = true;
			gridThread.setRunning(false);
			while (retry) {
				try {
					gridThread.join();
					retry = false;
				} catch (InterruptedException e) { }
			}
		}

		@Override
		public void surfaceCreated(SurfaceHolder holder) {
			gridThread.setRunning(true);
			gridThread.start();
			// Canvas c = holder.lockCanvas(null);
			// onDraw(c);
			// holder.unlockCanvasAndPost(c);
		}

		@Override
		public void surfaceChanged(SurfaceHolder holder, int format,
								   int width, int height) {
		}

	});
		
	@Override
    protected void onDraw(Canvas canvas) {
        if(!initialized) {
            // Ensure main grid is initialized before beginning draw thread
        }
		// Loop through and draw applicable cells
	}
    public void pause() {
        mHandler.removeCallbacks(mRunnable);
    }
    public void resume() {
        mHandler.postDelayed(mRunnable, mDelay);
    }

    Needed so android studio wont yell at me for doing the touch listener
    @Override
    public boolean performClick() {
        super.performClick();
        return true;
    }
}
***End GridSurface.java***

***GridLoopThread.java***
/*
 * Responsible for running the actual thread, and continually updating the canvas
 */
import android.graphics.Canvas;

public class GridLoopThread extends Thread {
    private GridSurface view;
    private boolean running;

    public GridLoopThread(GridSurface view) {
        this.view = view;
    }

    public void setRunning(boolean run) {
        running = run;
    }

    @Override
    public void run() {
        while (running) {
            Canvas c = null;
            try {
                c = view.getHolder().lockCanvas();
                synchronized (view.getHolder()) {
                    view.draw(c);
                }
            } finally {
                if (c != null) {
                    view.getHolder().unlockCanvasAndPost(c);
                }
            }
        }
    }
}
***End GridLoopThread.java***